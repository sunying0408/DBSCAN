import pandas as pd
import numpy as np
import math as m
import matplotlib.pyplot as plt 
import queue

data_path = "swzz1000.txt"
NOISE = 0
UNASSIGNED = -1

points = np.loadtxt(data_path, delimiter='\t')

from geopy.distance import geodesic
#print(geodesic((30.28708,120.12802999999997), (28.7427,115.86572000000001)).m) #计算两个坐标直线距离
def load_data():
    points = np.loadtxt(data_path, delimiter='\t')
    return points

 def dist(a, b):
     #return m.sqrt(np.power(a-b, 2).sum())
        return geodesic((a[1],a[0]), (b[1],b[0])).m

def neighbor_points(data, pointId, radius):
    points = []
    for i in range(len(data)):
        if dist(data[i, 1: 3], data[pointId, 1: 3]) < radius: #求样本点到核心点的距离
            points.append(i)
    return np.asarray(points)

def to_cluster(data, clusterRes, pointId, clusterId, radius, minPts): #判断一个点是否核心点

    points = neighbor_points(data, pointId, radius)
    points = points.tolist()

    q = queue.Queue()

    if len(points) < minPts:    
        clusterRes[pointId] = NOISE         #非核心点
        return False
    else:
        clusterRes[pointId] = clusterId       #类Id
    for point in points:
        if clusterRes[point] == UNASSIGNED:
            q.put(point)
            clusterRes[point] = clusterId

    while not q.empty():
        neighborRes = neighbor_points(data, q.get(), radius)
        if len(neighborRes) >= minPts:                      # 核心点
            for i in range(len(neighborRes)):                       
                resultPoint = neighborRes[i]
                if clusterRes[resultPoint] == UNASSIGNED:
                    q.put(resultPoint)
                    clusterRes[resultPoint] = clusterId
                elif clusterRes[clusterId] == NOISE:
                    clusterRes[resultPoint] = clusterId
    return True


def dbscan(data, radius, minPts):  #扫描数据集，为每个数据打上核心点、边界点、噪点标签
    clusterId = 0
    nPoints = len(data)
    clusterRes = [UNASSIGNED] * nPoints
    print(nPoints)
    for pointId in range(nPoints):
        print(pointId)
        if clusterRes[pointId] == UNASSIGNED:
            if to_cluster(data, clusterRes, pointId, clusterId, radius, minPts):
                clusterId = clusterId + 1
    return np.asarray(clusterRes), clusterId


def plotRes(data, clusterRes, clusterNum):
    lx=[]
    ly=[]
    nPoints = len(data)
    print(data)
    print(nPoints)
    scatterColors = ['black', 'blue', 'green', 'yellow', 'red', 'purple', 'orange', 'brown']
    for i in range(clusterNum):
        color = scatterColors[i % len(scatterColors)]
        x1 = []
        y1 = []

        for j in range(nPoints):
            if clusterRes[j] == i:
                x1.append(data[j, 1])  
                y1.append(data[j, 2])

        lx.append(x1)
        ly.append(y1)

    return lx, ly 

if __name__ == '__main__':
    data = load_data()
    cluster = np.asarray(data[:,2])
    clusterRes, clusterNum = dbscan(data, 1000, 10)  #邻域，核心样本邻域内最少样本数
    lx,ly=plotRes(data, clusterRes, clusterNum)
    print(lx,ly)

scatterColors = ['black', 'blue', 'green', 'yellow', 'red', 'purple', 'orange', 'brown']


for i in range(len(lx)):
    color = scatterColors[i % len(scatterColors)]
    x1=lx[i]
    y1=ly[i]

    plt.scatter(x1, y1, c=color, alpha=1, marker='+')

plt.show()              #画图
len(lx)         #显示聚类簇
